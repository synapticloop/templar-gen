plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'

	id 'com.gradle.plugin-publish' version '0.11.0'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.8.4'
	id "com.github.ben-manes.versions" version "0.28.0"

	id 'synapticloop.documentr' version '3.1.0'
	id 'synapticloop.copyrightr' version '1.3.1'
	id "synapticloop.projectFilestatistics" version "1.1.0"
}

// tasks.withType(Javadoc).all { enabled = false }

group = 'synapticloop'
archivesBaseName = 'templar-gen'
description = """generate output with the Templar templating engine"""
version = '1.5.0'

sourceCompatibility = 1.9
targetCompatibility = 1.9


repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

//cobertura {
//	coverageFormats = [ 'html', 'xml']
//}

test {
	include '**/*Test.class' 
	maxParallelForks = 1
	forkEvery = 50 
}

dependencies {
	compile 'synapticloop:templar:1.5.0'

	compileOnly gradleApi()
}

def locateJar(lib) {
	configurations.runtime.findAll {it.getName().contains(lib)}.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar) {
	classifier = 'all'

	from { locateJar('templar') } { include "**" }
	from { locateJar('json') } { include "**" }
	from(sourceSets.main.output) { include "**" }

	manifest {
		attributes("Main-Class": "synapticloop.templar.gen.Main")
	}

}

jar.finalizedBy(project.tasks.fatJar)

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

//test.finalizedBy(project.tasks.cobertura)


publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId group
			artifactId archivesBaseName

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = "templar-gen"
	}
}

copyrightr {
	dryRun = false
	excludes = [
		"src/test/java/**/*.java"
	]
}

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '.jar',
		'build/libs/' + archivesBaseName + '-' + version + '-all.jar'
	]
}

pluginBundle {
	website = 'https://github.com/synapticloop/templar-gen'
	vcsUrl = 'https://github.com/synapticloop/templar-gen'
	description = 'static site generator - this utilises the templar templating language'
	tags = [ 'documentation', 'generator' ]

	plugins {
		documentrPlugin {
			id = 'synapticloop.templar-gen'
			displayName = 'Synapticloop Gradle templar-gen plugin'
		}
	}
}
